# We use a single workflow to build all containers because github.run_number is
# specific to each workflow. This ensures that each image has an
# OTC_BUILD_NUMBER that is greater than previous runs which allows unique image
# tags to be created for each build.
name: Build & Push

# Sets the name of the CI run based on whether the run was triggered with or
# without a workflow_id set.
run-name: >
  ${{
  inputs.workflow_id == '' && 'Build for Remote Workflow: latest-main'
  ||
  inputs.workflow_id != '' && format('Build for Remote Workflow: {0}', inputs.workflow_id)
  }}

on:
  push:
    branches:
      - "main"
  pull_request:
  workflow_dispatch:
    inputs:
      workflow-id:
        description: |
          Workflow Run ID from the SumoLogic/sumologic-otel-collector repository
          to download artifacts from. The artifacts for the specified workflow
          must contain an otelcol-sumo binary for each platform that container
          images are being built for.
        required: false
        type: string

jobs:
  determine-build-info:
    name: Build Info
    uses: ./.github/workflows/workflow-determine-build-info.yml
    with:
      runs-on: ubuntu-24.04
      workflow-id: ${{ inputs.workflow-id }}
    secrets:
      gh-artifacts-token: ${{ secrets.GH_ARTIFACTS_TOKEN }}

  build-images:
    name: Container Images
    uses: ./.github/workflows/workflow-build-container-images.yml
    needs:
      - determine-build-info
    with:
      build-number: ${{ needs.determine-build-info.outputs.build-number }}
      version: ${{ needs.determine-build-info.outputs.version }}
      workflow-id: ${{ needs.determine-build-info.outputs.workflow-id }}
    secrets:
      aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      dockerhub-login: ${{ secrets.DOCKERHUB_LOGIN }}
      dockerhub-password: ${{ secrets.DOCKERHUB_PASSWORD }}
      gh-artifacts-token: ${{ secrets.GH_ARTIFACTS_TOKEN }}

  push-indexes:
    name: Container Indexes
    uses: ./.github/workflows/workflow-push-container-indexes.yml
    needs:
      - build-images
      - determine-build-info
    strategy:
      matrix:
        include:
          - target: standard
            tags: >
              [
              "latest",
              "${{ github.sha }}",
              "${{ needs.determine-build-info.outputs.version }}"
              ]
          - target: standard-fips
            tags: >
              [
              "latest-fips",
              "${{ github.sha }}-fips",
              "${{ needs.determine-build-info.outputs.version }}-fips"
              ]
          - target: ubi
            tags: >
              [
              "latest-ubi",
              "${{ github.sha }}-ubi",
              "${{ needs.determine-build-info.outputs.version }}-ubi"
              ]
          - target: ubi-fips
            tags: >
              [
              "latest-ubi-fips",
              "${{ github.sha }}-ubi-fips",
              "${{ needs.determine-build-info.outputs.version }}-ubi-fips"
              ]
    with:
      tags: ${{ matrix.tags }}
      target: ${{ matrix.target }}
      version: ${{ needs.determine-build-info.outputs.version }}
    secrets:
      aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  # Creates version files and uploads them as artifacts. This enables the
  # release workflow to determine the version information for a given workflow.
  version-files:
    name: Version Files
    runs-on: ubuntu-24.04
    needs:
      - determine-build-info
    env:
      BUILD_NUMBER: ${{ needs.determine-build-info.outputs.build-number }}
      CORE_VERSION: ${{ needs.determine-build-info.outputs.core-version }}
      GIT_REF: ${{ needs.determine-build-info.outputs.git-ref }}
      SUMO_VERSION: ${{ needs.determine-build-info.outputs.sumo-version }}
      VERSION: ${{ needs.determine-build-info.outputs.version }}
    steps:
      - name: Create version files
        run: |
          echo "${BUILD_NUMBER}" >> otc-build-number.txt
          echo "${CORE_VERSION}" > otc-core-version.txt
          echo "${GIT_REF}" >> otc-git-reference.txt
          echo "${SUMO_VERSION}" > otc-sumo-version.txt
          echo "${VERSION}" > otc-version.txt

      - name: Store otc-build-number.txt as action artifact
        uses: actions/upload-artifact@v4
        with:
          name: otc-build-number.txt
          path: ./otc-build-number.txt
          if-no-files-found: error

      - name: Store otc-core-version.txt as action artifact
        uses: actions/upload-artifact@v4
        with:
          name: otc-core-version.txt
          path: ./otc-core-version.txt
          if-no-files-found: error

      - name: Store otc-git-reference.txt as action artifact
        uses: actions/upload-artifact@v4
        with:
          name: otc-git-reference.txt
          path: ./otc-git-reference.txt
          if-no-files-found: error

      - name: Store otc-sumo-version.txt as action artifact
        uses: actions/upload-artifact@v4
        with:
          name: otc-sumo-version.txt
          path: ./otc-sumo-version.txt
          if-no-files-found: error

      - name: Store otc-version.txt as action artifact
        uses: actions/upload-artifact@v4
        with:
          name: otc-version.txt
          path: ./otc-version.txt
          if-no-files-found: error
