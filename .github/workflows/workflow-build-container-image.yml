name: Build container image

on:
  workflow_call:
    inputs:
      arch:
        description: The CPU architecture to build for.
        type: string
        required: true
      build-number:
        description: The build number of the container image.
        type: string
        required: true
      fips:
        description: Build container image using FIPS binary.
        default: false
        type: boolean
      os:
        description: The operating system to build for.
        type: string
        required: true
      os-version:
        description: The operating system version to build for.
        type: string
      product:
        description: |
          The product name to build. This allows different bake targets to end
          up in the same multi-platform image.
        type: string
        required: true
      push:
        description: Push the image to Docker Hub, ECR, etc.
        default: false
        type: boolean
      target:
        description: |
          The bake target to build. The product name will be used as the target
          when target is not set.
        type: string
      runs-on:
        default: ubuntu-24.04
        type: string
      version:
        description: |
          The version of the collector binary.
        type: string
        required: true
      workflow-id:
        description: |
          The ID of the GitHub Actions workflow in sumologic-otel-collector to
          fetch artifacts from.
        type: string
        required: true
    secrets:
      aws-access-key-id:
        required: true
      aws-secret-access-key:
        required: true
      dockerhub-login:
        required: true
      dockerhub-password:
        required: true
      gh-artifacts-token:
        required: true

defaults:
  run:
    shell: bash

jobs:
  build:
    name: Build
    runs-on: ${{ inputs.runs-on }}
    steps:
      - uses: actions/checkout@v4

      - name: Workflow URL for sumologic-otel-collector
        run: |
          org="SumoLogic"
          repo="sumologic-otel-collector"
          workflow_id="${{ inputs.workflow-id }}"
          echo "https://github.com/${org}/${repo}/actions/runs/${workflow_id}"

      - name: Set binary name
        uses: ./.github/actions/determine-binary-name
        id: binary-name
        with:
          fips: ${{ inputs.fips }}
          name: otelcol-sumo
          platform: ${{ inputs.os }}_${{ inputs.arch }}

      - name: Output platform information
        id: platform
        run: |
          os="${{ inputs.os }}"
          os_version="${{ inputs.os-version }}"
          arch="${{ inputs.arch }}"
          binary_name="${{ steps.binary-name.outputs.name }}"
          product="${{ inputs.product }}"
          target="${{ inputs.target }}"

          artifact_path="artifacts/${os}/${arch}/${binary_name}"

          manifest="manifest_${product}_${os}_${arch}"
          if [[ "${target}" != "" ]]; then
            manifest+="_${target}"
          fi

          name_with_os_version="${os}"
          if [[ "${os_version}" != "" ]]; then
            name_with_os_version+="(${os_version})"
          fi
          name_with_os_version+="/${arch}"

          {
          echo "name=${os}"
          echo "name-with-os-version=${name_with_os_version}"
          echo "artifact-path=${artifact_path}"
          echo "manifest-name=${manifest}"
          } >> "$GITHUB_OUTPUT"

      - name: Download otelcol-sumo artifact from workflow
        uses: actions/download-artifact@v4
        with:
          name: ${{ steps.binary-name.outputs.name-with-platform }}
          path: ${{ steps.platform.outputs.artifact-path }}
          repository: github.com/sumologic/sumologic-otel-collector
          run-id: ${{ inputs.build-number }}

      - name: Set image metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          labels: |
            # TODO: add git-reference of collector
            version=${{ inputs.version }}

      - name: Setup BuildKit (Windows)
        if: runner.os == 'Windows'
        uses: ./.github/actions/setup-buildkit-windows
        with:
          buildkit-version: "0.23.0"
          buildx-version: "0.24.0"
          containerd-version: "2.1.2"
          docker-version: "28.2.2"

      - name: Set up QEMU
        if: runner.os != 'Windows'
        uses: docker/setup-qemu-action@v3.6.0

      - name: Set up Buildx
        if: runner.os != 'Windows'
        id: buildx
        uses: docker/setup-buildx-action@v3.10.0

      - name: Show Buildx platforms
        if: runner.os != 'Windows'
        run: echo ${{ steps.buildx.outputs.platforms }}

      - name: Login to ECR
        uses: docker/login-action@v3
        with:
          registry: 663229565520.dkr.ecr.us-east-1.amazonaws.com
          username: ${{ secrets.aws-access-key-id }}
          password: ${{ secrets.aws-secret-access-key }}

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.dockerhub-login }}
          password: ${{ secrets.dockerhub-password }}

      - name: Build (Local)
        if: ! inputs.push
        id: build-local
        uses: docker/bake-action@v6
        with:
          source: .
          targets: ${{ inputs.target || inputs.product }}
          provenance: false
          files: |
            ./docker-bake.hcl
            ./docker-bake.ecr-override.hcl
            ./docker-bake.ci-override.hcl
            cwd://${{ steps.meta.outputs.bake-file }}
          set: |
            *.platform=${{ steps.platform.outputs.name-with-os-version }}
            *.tags=local/otelcol-sumo
            *.output=push=local/otelcol-sumo
            *.output=push=false
            *.output=push-by-digest=false
            *.output=type=docker

      - name: Build and push (ECR)
        if: inputs.push
        id: build-ecr
        uses: docker/bake-action@v6
        with:
          source: .
          targets: ${{ inputs.target || inputs.product }}
          provenance: false
          files: |
            ./docker-bake.hcl
            ./docker-bake.ecr-override.hcl
            ./docker-bake.ci-override.hcl
            cwd://${{ steps.meta.outputs.bake-file }}
          set: |
            *.platform=${{ steps.platform.outputs.name-with-os-version }}
            *.tags=

      - name: Build and push (Docker)
        if: inputs.push
        id: build-dh
        uses: docker/bake-action@v6
        with:
          source: .
          targets: ${{ inputs.target || inputs.product }}
          provenance: false
          files: |
            ./docker-bake.hcl
            ./docker-bake.dh-override.hcl
            ./docker-bake.ci-override.hcl
            cwd://${{ steps.meta.outputs.bake-file }}
          set: |
            *.platform=${{ steps.platform.outputs.name-with-os-version }}
            *.tags=

      - name: Print & fix metadata
        id: fix-metadata
        if: |
          steps.build-ecr.conclusion == 'success'
          &&
          steps.build-dh.conclusion == 'success'
        run: |
          echo "-- Current metadata (ECR)"
          echo '${{ steps.build-ecr.outputs.metadata }}' | tee metadata-ecr.json
          echo "-- Fixed metadata (ECR)"
          jq -jf ci/jq/fix-metadata.jq metadata.json | tee metadata-ecr.json

          echo "-- Current metadata (Docker Hub)"
          echo '${{ steps.build-dh.outputs.metadata }}' | tee metadata-dh.json
          echo "-- Fixed metadata (Docker Hub)"
          jq -jf ci/jq/fix-metadata.jq metadata.json | tee metadata-dh.json

      - name: Set container image manifest output
        if: steps.fix-metadata.conclusion == 'success'
        id: manifest
        run: |
          name="${{ steps.platform.outputs.manifest-name }}"
          target="${{ inputs.target || inputs.product }}"
          jq -c ".[\"$target\"]" metadata-ecr.json | tee "${name}-ecr.json"
          jq -c ".[\"$target\"]" metadata-dh.json | tee "${name}-dh.json"

      - uses: actions/upload-artifact@v4
        if: steps.manifest.conclusion == 'success'
        with:
          name: ${{ steps.platform.outputs.manifest-name }}-ecr
          path: ${{ steps.platform.outputs.manifest-name }}-ecr.json
          if-no-files-found: error

      - uses: actions/upload-artifact@v4
        if: steps.manifest.conclusion == 'success'
        with:
          name: ${{ steps.platform.outputs.manifest-name }}-dh
          path: ${{ steps.platform.outputs.manifest-name }}-dh.json
          if-no-files-found: error
