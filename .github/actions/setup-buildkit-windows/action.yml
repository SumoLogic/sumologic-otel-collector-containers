name: Setup BuildKit on Windows

description: |
  Installs and configures BuildKit & its dependencies for Windows.

inputs:
  buildkit-version:
    description: The version of buildkit to install.
    required: true
  buildx-version:
    description: The version of buildx to install.
    required: true
  containerd-version:
    description: The version of containerd to install.
    required: true
  docker-version:
    description: The version of Docker to install.
    required: true

outputs:
  vhdx-name:
    description: The name of the VHDX image used for caching.
    value: ${{ steps.cache.outputs.vhdx-name }}

runs:
  using: "composite"
  steps:
    - name: Check Runner
      shell: bash
      run: |
        if [[ "${RUNNER_OS}" != "Windows" ]]; then
          echo "The setup-buildkit-windows action is only supported on Windows runners"
          exit 1
        fi

    - name: Determine Architecture
      id: get-arch
      shell: bash
      run: |
        arch="$(uname -m)"
        echo "name=${arch}" >> "$GITHUB_OUTPUT"

    - name: Generate cache key
      id: cache-key
      shell: pwsh
      run: |
        $buildkit = "${{ inputs.buildkit-version }}"
        $buildx = "${{ inputs.buildx-version }}"
        $containerd = "${{ inputs.containerd-version }}"
        $docker = "${{ inputs.docker-version }}"

        $versions = "${buildkit}-${buildx}-${containerd}-${docker}"
        $bytes = [System.Text.Encoding]::UTF8.GetBytes($versions)
        $sha256 = [System.Security.Cryptography.HashAlgorithm]::Create("sha256")
        $hash = $sha256.ComputeHash($bytes)
        $checksumFormatted = [System.BitConverter]::ToString($hash)
        $checksum = $checksumFormatted.Replace("-", "").ToLowerInvariant()

        "name=$checksum" >> $env:GITHUB_OUTPUT

    - name: Setup VHDX for caching
      id: cache
      uses: ./.github/actions/setup-vhdx
      with:
        cache-key: ${{ steps.cache-key.outputs.name }}
        name: buildkit-cache
        size: 500MB

    # NOTE: use version 1.7.27 or newer
    - name: Download & Install containerd
      shell: pwsh
      run: |
        $start = [DateTimeOffset]::UtcNow.ToUnixTimeMilliseconds()
        $drive = "${{ steps.cache.outputs.drive-letter }}"
        $containerdPath = "${drive}:\containerd"
        $binPath = "${containerdPath}\bin"
        $version = "${{ inputs.containerd-version }}"
        $arch = "amd64"
        $file = "containerd-${version}-windows-${arch}.tar.gz"
        $repo = "https://github.com/containerd/containerd"
        $url = "${repo}/releases/download/v${version}/${file}"

        echo "Downloading ${url}"
        curl.exe -LO "${url}"
        mkdir $containerdPath
        tar.exe -xvC $containerdPath -f $file
        $end = [DateTimeOffset]::UtcNow.ToUnixTimeMilliseconds()
        $duration = ($end - $start)
        echo "Download completed in ${duration} ms"

        "$binPath" >> $env:GITHUB_PATH

    - name: Configure containerd
      shell: pwsh
      run: |
        $start = [DateTimeOffset]::UtcNow.ToUnixTimeMilliseconds()
        $drive = "${{ steps.cache.outputs.drive-letter }}"
        $configPath = "${drive}:\containerd\config.toml"
        containerd.exe config default | Out-File $configPath -Encoding ascii
        Get-Content $configPath
        $end = [DateTimeOffset]::UtcNow.ToUnixTimeMilliseconds()
        $duration = ($end - $start)
        echo "Configure containerd completed in ${duration} ms"

    - name: Register containerd Service
      shell: pwsh
      run: |
        $start = [DateTimeOffset]::UtcNow.ToUnixTimeMilliseconds()
        containerd.exe --register-service
        $end = [DateTimeOffset]::UtcNow.ToUnixTimeMilliseconds()
        $duration = ($end - $start)
        echo "Register containerd Service completed in ${duration} ms"

    - name: Start containerd Service
      shell: pwsh
      run: |
        $start = [DateTimeOffset]::UtcNow.ToUnixTimeMilliseconds()
        Start-Service containerd
        $end = [DateTimeOffset]::UtcNow.ToUnixTimeMilliseconds()
        $duration = ($end - $start)
        echo "Start containerd Service completed in ${duration} ms"

    - name: Download & Install Buildkit
      shell: pwsh
      run: |
        $start = [DateTimeOffset]::UtcNow.ToUnixTimeMilliseconds()
        $drive = "${{ steps.cache.outputs.drive-letter }}"
        $buildkitPath = "${drive}:\buildkit"
        $binPath = "${buildkitPath}\bin"
        $version = "${{ inputs.buildkit-version }}"
        $arch = "amd64"
        $file = "buildkit-v${version}.windows-${arch}.tar.gz"
        $repo = "https://github.com/moby/buildkit"
        $url = "${repo}/releases/download/v${version}/${file}"

        echo "Downloading ${url}"
        curl.exe -LO "${url}"
        mkdir $buildkitPath
        tar.exe -xvC $buildkitPath -f $file
        $end = [DateTimeOffset]::UtcNow.ToUnixTimeMilliseconds()
        $duration = ($end - $start)
        echo "Download & Install Buildkit completed in ${duration} ms"

        "$binPath" >> $env:GITHUB_PATH

    - name: Register Buildkit Service
      shell: pwsh
      run: |
        $start = [DateTimeOffset]::UtcNow.ToUnixTimeMilliseconds()
        buildkitd.exe --register-service
        $end = [DateTimeOffset]::UtcNow.ToUnixTimeMilliseconds()
        $duration = ($end - $start)
        echo "Register Buildkit Service completed in ${duration} ms"

    - name: Start Buildkit Service
      shell: pwsh
      run: |
        $start = [DateTimeOffset]::UtcNow.ToUnixTimeMilliseconds()
        Start-Service buildkitd
        $end = [DateTimeOffset]::UtcNow.ToUnixTimeMilliseconds()
        $duration = ($end - $start)
        echo "Start Buildkit Service completed in ${duration} ms"

    - name: Before Setup Docker
      id: before-docker
      shell: pwsh
      run: |
        $ts = [DateTimeOffset]::UtcNow.ToUnixTimeMilliseconds()
        "timestamp=${ts}" >> $env:GITHUB_OUTPUT

    - name: Setup Docker
      uses: docker/setup-docker-action@v4
      with:
        version: ${{ inputs.docker-version }}
        daemon-config: |
          {
            "default-runtime": "io.containerd.runhcs.v1",
            "features": {
              "buildkit": true,
              "containerd-snapshotter": true
            }
          }

    - name: After Setup Docker
      shell: pwsh
      run: |
        $start = ${{ steps.before-docker.outputs.timestamp }}
        $end = [DateTimeOffset]::UtcNow.ToUnixTimeMilliseconds()
        $duration = ($end - $start)
        echo "Setup Docker completed in ${duration} ms"

    - name: Setup Buildx
      shell: pwsh
      run: |
        $start = [DateTimeOffset]::UtcNow.ToUnixTimeMilliseconds()
        $pluginsPath = "${env:ProgramData}\Docker\cli-plugins"
        $version = "${{ inputs.buildx-version }}"
        $arch = "amd64"
        $file = "buildx-v${version}.windows-${arch}.exe"
        $repo = "https://github.com/docker/buildx"
        $url = "${repo}/releases/download/v${version}/${file}"

        curl.exe -LO "${url}"
        mv $file ${pluginsPath}\docker-buildx.exe

        $end = [DateTimeOffset]::UtcNow.ToUnixTimeMilliseconds()
        $duration = ($end - $start)
        echo "Setup Buildx completed in ${duration} ms"

    - name: Create Buildx builder
      shell: pwsh
      run: |
        $start = [DateTimeOffset]::UtcNow.ToUnixTimeMilliseconds()

        docker buildx create `
          --name buildkit-exp `
          --use `
          --driver=remote npipe:////./pipe/buildkitd

        $end = [DateTimeOffset]::UtcNow.ToUnixTimeMilliseconds()
        $duration = ($end - $start)
        echo "Create Buildx builder completed in ${duration} ms"
